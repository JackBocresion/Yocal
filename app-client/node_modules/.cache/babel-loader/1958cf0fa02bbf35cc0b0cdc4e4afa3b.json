{"ast":null,"code":"var _jsxFileName = \"/Users/jackbocresion/Desktop/YoCal copy/client/app-client/src/App.js\";\n// import Navbar from './components/Nav';\nimport React, { useEffect, useState, createContext } from 'react'; // import './styles/calendar.scss';\n// import './styles/App.css';\n// import Login from './components/Login';\n// import Home from './components/Home';\n// //import Home from './components/newhome';\n// import {\n//    BrowserRouter as Router,\n//    Route,\n//    Switch,\n//    Redirect,\n//    useLocation,\n//    useHistory,\n// } from 'react-router-dom';\n// import Createevent from './components/CreateEvent';\n// import './styles/Event.scss';\n// import axios from 'axios';\n// import Friends from './components/Friends';\n// import BetaFooter from './components/BetaFooter';\n// import Edit from './components/Edit';\n// import './styles/toruskit.css';\n// import Chat from './components/Chat/chatHome';\n// import Spinner from './microComponents/spinner';\n// import Archive from './components/Archive';\n// import { valify } from \"./maps\"\n\nimport { io } from 'socket.io-client';\nMap.prototype.valify = valify; // import Conflicts from \"./components/Conflicts\"\n//use via props vs via a freq called func becasue it will give better performance!\n\nexport const userData = createContext();\n\nconst App = () => {\n  //create a function here that will create the props data. if it cannot find the data for the prop, redirect and/or return null.\n  // const [state, setState] = useState({\n  //    username: null,\n  //    data: null,\n  //    events: null,\n  //    friendEvents: null,\n  //    /*--------------------*/\n  //    friendReqs: null,\n  //    friends: null,\n  //    /*--------------------*/\n  //    month: null,\n  //    year: null,\n  //    /* ------------------ */\n  //    chats: null,\n  //    messages: null,\n  // });\n  // const [loading, setLoading] = useState(true);\n  //get to removeing the constructors!!!\n  useEffect(() => {\n    // getData();\n    setInterval(() => {\n      console.log('refreshing...'); // getData();\n    }, 15000); //localize???\n  }, []); //put events into state\n  //console.log(state, 'state from appjs');\n  //\n\n  const [background, setBackground] = useState(\"\");\n  useEffect(() => {\n    let socket = io('http://localhost:8000');\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }\n  }, \"ho\")); // function getData() {\n  //    const cookie = localStorage.getItem('token');\n  //    if (cookie) {\n  //       if (window.location.pathname === '/') {\n  //          window.location.pathname = '/home';\n  //       }\n  //       axios\n  //          .get('http://localhost:8000/getuser', {\n  //             headers: { Authorization: `Bearer ${cookie}` },\n  //          })\n  //          .then((res) => {\n  //             console.log(res.data, 'res');\n  //             //  setTimeout(()=>\n  //             const meep = new Map(res.data.events)\n  //             console.log(meep.valify());\n  //             setState({\n  //                username: res.data.user.username,\n  //                data: res.data.user,\n  //                events: meep,//.valify(),\n  //                //FIX THIS!!!!!\n  //                id: res.data.user.id,\n  //                /*--------------------*/\n  //                incoming: res.data.incoming,\n  //                outgoing: res.data.outgoing,\n  //                friends: res.data.friends,\n  //                /*--------------------*/\n  //                refresh: () => getData(),\n  //                /*--------------------*/\n  //                conflicts: res.data.conflicts,\n  //             }); //,\n  //             // 3000\n  //             console.log(meep.get(362),\"meepget0\")\n  //             //   );\n  //          })\n  //          .catch((err) => {\n  //             //if the cookie is bad, then login\n  //             console.log('in catch block, fatal req error', err);\n  //             localStorage.removeItem('token');\n  //             window.location.pathname = '/';\n  //          });\n  //       //this should ONLY be triggered when the cookie is null and the pathname is not login, so a user is not found.\n  //    } else if (window.location.pathname != '/') {\n  //       //if there is no cookie, the redirect will go through, but the component will handle the rejection.\n  //       //console.log('error!');\n  //       // <Redirect to=\"/\"/>\n  //       window.location.pathname = '/';\n  //    }\n  // }\n\n  function createHandshake() {}\n};\n\nexport default App; //concat arrays of old, upcoming and today\n//filter then sort for each, then concat\n//add a buffer of ~1-3 days","map":{"version":3,"sources":["/Users/jackbocresion/Desktop/YoCal copy/client/app-client/src/App.js"],"names":["React","useEffect","useState","createContext","io","Map","prototype","valify","userData","App","setInterval","console","log","background","setBackground","socket","createHandshake"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,aAArC,QAA0D,OAA1D,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASC,EAAT,QAAmB,kBAAnB;AACAC,GAAG,CAACC,SAAJ,CAAcC,MAAd,GAAuBA,MAAvB,C,CACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGL,aAAa,EAA9B;;AAKP,MAAMM,GAAG,GAAG,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,EAAAA,SAAS,CAAC,MAAM;AACb;AACAS,IAAAA,WAAW,CAAC,MAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADe,CAEf;AACF,KAHU,EAGR,KAHQ,CAAX,CAFa,CAMb;AACF,GAPQ,EAON,EAPM,CAAT,CAnBe,CA4Bf;AACA;AAEA;;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACb,QAAIc,MAAM,GAAGX,EAAE,CAAC,uBAAD,CAAf;AACF,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADH,CADH,CAvCe,CAqEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAASY,eAAT,GAA2B,CAE1B;AACH,CA3HD;;AA6HA,eAAeP,GAAf,C,CAEA;AAEA;AAEA","sourcesContent":["// import Navbar from './components/Nav';\nimport React, { useEffect, useState, createContext } from 'react';\n// import './styles/calendar.scss';\n// import './styles/App.css';\n// import Login from './components/Login';\n// import Home from './components/Home';\n// //import Home from './components/newhome';\n// import {\n//    BrowserRouter as Router,\n//    Route,\n//    Switch,\n//    Redirect,\n//    useLocation,\n//    useHistory,\n// } from 'react-router-dom';\n// import Createevent from './components/CreateEvent';\n// import './styles/Event.scss';\n// import axios from 'axios';\n// import Friends from './components/Friends';\n// import BetaFooter from './components/BetaFooter';\n// import Edit from './components/Edit';\n// import './styles/toruskit.css';\n// import Chat from './components/Chat/chatHome';\n// import Spinner from './microComponents/spinner';\n// import Archive from './components/Archive';\n// import { valify } from \"./maps\"\n\n\n\nimport { io } from 'socket.io-client';\nMap.prototype.valify = valify\n// import Conflicts from \"./components/Conflicts\"\n//use via props vs via a freq called func becasue it will give better performance!\nexport const userData = createContext();\n\n\n\n\nconst App = () => {\n   //create a function here that will create the props data. if it cannot find the data for the prop, redirect and/or return null.\n   // const [state, setState] = useState({\n   //    username: null,\n   //    data: null,\n   //    events: null,\n   //    friendEvents: null,\n   //    /*--------------------*/\n   //    friendReqs: null,\n   //    friends: null,\n   //    /*--------------------*/\n   //    month: null,\n   //    year: null,\n   //    /* ------------------ */\n   //    chats: null,\n   //    messages: null,\n   // });\n   // const [loading, setLoading] = useState(true);\n   //get to removeing the constructors!!!\n   useEffect(() => {\n      // getData();\n      setInterval(() => {\n         console.log('refreshing...');\n         // getData();\n      }, 15000);\n      //localize???\n   }, []);\n\n   //put events into state\n   //console.log(state, 'state from appjs');\n\n   //\n\n   const [background, setBackground] = useState(\"\")\n   \n   useEffect(() => {\n      let socket = io('http://localhost:8000');\n   },[])\n   \n   return (\n      <div>\n         <h1>ho</h1>\n         {/* <userData.Provider value={state}>\n            {state.username == null && window.location.pathname != '/' ? (\n               <Spinner />\n            ) : (\n               <Router>\n                  <Navbar />\n                  <Switch>\n                     <Route path=\"/\" exact component={Login} />\n                     <Route path=\"/home\" exact component={Home} />\n                     <Route\n                        exact\n                        path=\"/home/:day/:month/:year\"\n                        component={Createevent}\n                     />\n                     <Route exact path=\"/friends\" component={Friends} />\n                     <Route exact path=\"/chat\" component={Chat} />\n                     <Route exact path=\"/edit/:id\" component={Edit} />\n                     <Route exact path=\"/archive\" component={Archive} />\n                     // <Route exact path=\"/conflicts\" component={Conflicts} /> \n                     <Route render={() => <h1>404 error</h1>} />\n                  </Switch>\n                   <BetaFooter />\n               </Router>\n            )} \n         </userData.Provider> */}\n      </div>\n   );\n   // function getData() {\n   //    const cookie = localStorage.getItem('token');\n   //    if (cookie) {\n   //       if (window.location.pathname === '/') {\n   //          window.location.pathname = '/home';\n   //       }\n   //       axios\n   //          .get('http://localhost:8000/getuser', {\n   //             headers: { Authorization: `Bearer ${cookie}` },\n   //          })\n   //          .then((res) => {\n   //             console.log(res.data, 'res');\n   //             //  setTimeout(()=>\n   //             const meep = new Map(res.data.events)\n   //             console.log(meep.valify());\n   //             setState({\n   //                username: res.data.user.username,\n   //                data: res.data.user,\n   //                events: meep,//.valify(),\n   //                //FIX THIS!!!!!\n   //                id: res.data.user.id,\n   //                /*--------------------*/\n   //                incoming: res.data.incoming,\n   //                outgoing: res.data.outgoing,\n   //                friends: res.data.friends,\n   //                /*--------------------*/\n   //                refresh: () => getData(),\n   //                /*--------------------*/\n   //                conflicts: res.data.conflicts,\n   //             }); //,\n   //             // 3000\n   //             console.log(meep.get(362),\"meepget0\")\n   //             //   );\n            \n   //          })\n   //          .catch((err) => {\n   //             //if the cookie is bad, then login\n   //             console.log('in catch block, fatal req error', err);\n   //             localStorage.removeItem('token');\n   //             window.location.pathname = '/';\n   //          });\n   //       //this should ONLY be triggered when the cookie is null and the pathname is not login, so a user is not found.\n   //    } else if (window.location.pathname != '/') {\n   //       //if there is no cookie, the redirect will go through, but the component will handle the rejection.\n   //       //console.log('error!');\n   //       // <Redirect to=\"/\"/>\n   //       window.location.pathname = '/';\n   //    }\n   // }\n\n\n   function createHandshake() {\n      \n   }\n};\n\nexport default App;\n\n//concat arrays of old, upcoming and today\n\n//filter then sort for each, then concat\n\n//add a buffer of ~1-3 days"]},"metadata":{},"sourceType":"module"}