{"ast":null,"code":"var _jsxFileName = \"/Users/jackbocresion/Desktop/YoCal copy/client/app-client/src/App.js\";\n// // import Navbar from './components/Nav';\n// import React, { useEffect, useState, createContext } from 'react';\n// // import './styles/calendar.scss';\n// // import './styles/App.css';\n// // import Login from './components/Login';\n// // import Home from './components/Home';\n// // //import Home from './components/newhome';\n// // import {\n// //    BrowserRouter as Router,\n// //    Route,\n// //    Switch,\n// //    Redirect,\n// //    useLocation,\n// //    useHistory,\n// // } from 'react-router-dom';\n// // import Createevent from './components/CreateEvent';\n// // import './styles/Event.scss';\n// // import axios from 'axios';\n// // import Friends from './components/Friends';\n// // import BetaFooter from './components/BetaFooter';\n// // import Edit from './components/Edit';\n// // import './styles/toruskit.css';\n// // import Chat from './components/Chat/chatHome';\n// // import Spinner from './microComponents/spinner';\n// // import Archive from './components/Archive';\n// // import { valify } from \"./maps\"\n// import { io } from 'socket.io-client';\n// // Map.prototype.valify = valify\n// // import Conflicts from \"./components/Conflicts\"\n// //use via props vs via a freq called func becasue it will give better performance!\n// // export const userData = createContext();\n// const App = () => {\n//    //create a function here that will create the props data. if it cannot find the data for the prop, redirect and/or return null.\n//    // const [state, setState] = useState({\n//    //    username: null,\n//    //    data: null,\n//    //    events: null,\n//    //    friendEvents: null,\n//    //    /*--------------------*/\n//    //    friendReqs: null,\n//    //    friends: null,\n//    //    /*--------------------*/\n//    //    month: null,\n//    //    year: null,\n//    //    /* ------------------ */\n//    //    chats: null,\n//    //    messages: null,\n//    // });\n//    // const [loading, setLoading] = useState(true);\n//    //get to removeing the constructors!!!\n//    useEffect(() => {\n//       // getData();\n//       setInterval(() => {\n//          console.log('refreshing...');\n//          // getData();\n//       }, 15000);\n//       //localize???\n//    }, []);\n//    //put events into state\n//    //console.log(state, 'state from appjs');\n//    //\n//    useEffect(() => {\n//      io('http://localhost:8000/');\n//    },[])\n//    return (\n//       <div>\n//          <h1>ho</h1>\n//       </div>\n//    );\n//    // function getData() {\n//    //    const cookie = localStorage.getItem('token');\n//    //    if (cookie) {\n//    //       if (window.location.pathname === '/') {\n//    //          window.location.pathname = '/home';\n//    //       }\n//    //       axios\n//    //          .get('http://localhost:8000/getuser', {\n//    //             headers: { Authorization: `Bearer ${cookie}` },\n//    //          })\n//    //          .then((res) => {\n//    //             console.log(res.data, 'res');\n//    //             //  setTimeout(()=>\n//    //             const meep = new Map(res.data.events)\n//    //             console.log(meep.valify());\n//    //             setState({\n//    //                username: res.data.user.username,\n//    //                data: res.data.user,\n//    //                events: meep,//.valify(),\n//    //                //FIX THIS!!!!!\n//    //                id: res.data.user.id,\n//    //                /*--------------------*/\n//    //                incoming: res.data.incoming,\n//    //                outgoing: res.data.outgoing,\n//    //                friends: res.data.friends,\n//    //                /*--------------------*/\n//    //                refresh: () => getData(),\n//    //                /*--------------------*/\n//    //                conflicts: res.data.conflicts,\n//    //             }); //,\n//    //             // 3000\n//    //             console.log(meep.get(362),\"meepget0\")\n//    //             //   );\n//    //          })\n//    //          .catch((err) => {\n//    //             //if the cookie is bad, then login\n//    //             console.log('in catch block, fatal req error', err);\n//    //             localStorage.removeItem('token');\n//    //             window.location.pathname = '/';\n//    //          });\n//    //       //this should ONLY be triggered when the cookie is null and the pathname is not login, so a user is not found.\n//    //    } else if (window.location.pathname != '/') {\n//    //       //if there is no cookie, the redirect will go through, but the component will handle the rejection.\n//    //       //console.log('error!');\n//    //       // <Redirect to=\"/\"/>\n//    //       window.location.pathname = '/';\n//    //    }\n//    // }\n//    function createHandshake() {\n//    }\n// };\n// export default App;\n// //concat arrays of old, upcoming and today\n// //filter then sort for each, then concat\n// //add a buffer of ~1-3 days\nimport React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst ENDPOINT = 'http://127.0.0.1:4001';\n\nfunction App() {\n  const [response, setResponse] = useState('');\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on('FromAPI', data => {\n      setResponse(data);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"It's \", /*#__PURE__*/React.createElement(\"time\", {\n    dateTime: response,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, response));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jackbocresion/Desktop/YoCal copy/client/app-client/src/App.js"],"names":["React","useState","useEffect","socketIOClient","ENDPOINT","App","response","setResponse","socket","on","data"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,SAASC,GAAT,GAAe;AACZ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMM,MAAM,GAAGL,cAAc,CAACC,QAAD,CAA7B;AACAI,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC5BH,MAAAA,WAAW,CAACG,IAAD,CAAX;AACF,KAFD;AAGF,GALQ,EAKN,EALM,CAAT;AAOA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACQ;AAAM,IAAA,QAAQ,EAAEJ,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,QAA3B,CADR,CADH;AAKF;;AAED,eAAeD,GAAf","sourcesContent":["// // import Navbar from './components/Nav';\n// import React, { useEffect, useState, createContext } from 'react';\n// // import './styles/calendar.scss';\n// // import './styles/App.css';\n// // import Login from './components/Login';\n// // import Home from './components/Home';\n// // //import Home from './components/newhome';\n// // import {\n// //    BrowserRouter as Router,\n// //    Route,\n// //    Switch,\n// //    Redirect,\n// //    useLocation,\n// //    useHistory,\n// // } from 'react-router-dom';\n// // import Createevent from './components/CreateEvent';\n// // import './styles/Event.scss';\n// // import axios from 'axios';\n// // import Friends from './components/Friends';\n// // import BetaFooter from './components/BetaFooter';\n// // import Edit from './components/Edit';\n// // import './styles/toruskit.css';\n// // import Chat from './components/Chat/chatHome';\n// // import Spinner from './microComponents/spinner';\n// // import Archive from './components/Archive';\n// // import { valify } from \"./maps\"\n\n\n\n// import { io } from 'socket.io-client';\n// // Map.prototype.valify = valify\n// // import Conflicts from \"./components/Conflicts\"\n// //use via props vs via a freq called func becasue it will give better performance!\n// // export const userData = createContext();\n\n\n\n\n// const App = () => {\n//    //create a function here that will create the props data. if it cannot find the data for the prop, redirect and/or return null.\n//    // const [state, setState] = useState({\n//    //    username: null,\n//    //    data: null,\n//    //    events: null,\n//    //    friendEvents: null,\n//    //    /*--------------------*/\n//    //    friendReqs: null,\n//    //    friends: null,\n//    //    /*--------------------*/\n//    //    month: null,\n//    //    year: null,\n//    //    /* ------------------ */\n//    //    chats: null,\n//    //    messages: null,\n//    // });\n//    // const [loading, setLoading] = useState(true);\n//    //get to removeing the constructors!!!\n//    useEffect(() => {\n//       // getData();\n//       setInterval(() => {\n//          console.log('refreshing...');\n//          // getData();\n//       }, 15000);\n//       //localize???\n//    }, []);\n\n//    //put events into state\n//    //console.log(state, 'state from appjs');\n\n//    //\n\n   \n//    useEffect(() => {\n//      io('http://localhost:8000/');\n//    },[])\n   \n//    return (\n//       <div>\n//          <h1>ho</h1>\n//       </div>\n//    );\n//    // function getData() {\n//    //    const cookie = localStorage.getItem('token');\n//    //    if (cookie) {\n//    //       if (window.location.pathname === '/') {\n//    //          window.location.pathname = '/home';\n//    //       }\n//    //       axios\n//    //          .get('http://localhost:8000/getuser', {\n//    //             headers: { Authorization: `Bearer ${cookie}` },\n//    //          })\n//    //          .then((res) => {\n//    //             console.log(res.data, 'res');\n//    //             //  setTimeout(()=>\n//    //             const meep = new Map(res.data.events)\n//    //             console.log(meep.valify());\n//    //             setState({\n//    //                username: res.data.user.username,\n//    //                data: res.data.user,\n//    //                events: meep,//.valify(),\n//    //                //FIX THIS!!!!!\n//    //                id: res.data.user.id,\n//    //                /*--------------------*/\n//    //                incoming: res.data.incoming,\n//    //                outgoing: res.data.outgoing,\n//    //                friends: res.data.friends,\n//    //                /*--------------------*/\n//    //                refresh: () => getData(),\n//    //                /*--------------------*/\n//    //                conflicts: res.data.conflicts,\n//    //             }); //,\n//    //             // 3000\n//    //             console.log(meep.get(362),\"meepget0\")\n//    //             //   );\n            \n//    //          })\n//    //          .catch((err) => {\n//    //             //if the cookie is bad, then login\n//    //             console.log('in catch block, fatal req error', err);\n//    //             localStorage.removeItem('token');\n//    //             window.location.pathname = '/';\n//    //          });\n//    //       //this should ONLY be triggered when the cookie is null and the pathname is not login, so a user is not found.\n//    //    } else if (window.location.pathname != '/') {\n//    //       //if there is no cookie, the redirect will go through, but the component will handle the rejection.\n//    //       //console.log('error!');\n//    //       // <Redirect to=\"/\"/>\n//    //       window.location.pathname = '/';\n//    //    }\n//    // }\n\n\n//    function createHandshake() {\n      \n//    }\n// };\n\n// export default App;\n\n// //concat arrays of old, upcoming and today\n\n// //filter then sort for each, then concat\n\n// //add a buffer of ~1-3 days\nimport React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst ENDPOINT = 'http://127.0.0.1:4001';\n\nfunction App() {\n   const [response, setResponse] = useState('');\n\n   useEffect(() => {\n      const socket = socketIOClient(ENDPOINT);\n      socket.on('FromAPI', (data) => {\n         setResponse(data);\n      });\n   }, []);\n\n   return (\n      <p>\n         It's <time dateTime={response}>{response}</time>\n      </p>\n   );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}